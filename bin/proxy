#!/usr/bin/env node
'use strict';

var fs = require('fs');
var http = require('http');
var https = require('https');
var httpProxy = require('http-proxy');
var typer = require('media-typer');
var async = require('async');
var _ = require('lodash');

var filter = require('../lib/filter');
var action = require('../lib/action');

var proxyPort = process.env.PROXY_PORT || 2375;
var targetSocket = { socketPath: process.env.TARGET_SOCKET || '/docker.sock' };



// get JSON body
var getRequestJsonBody = function(req, callback) {
  var bodyLength = parseInt(req.headers['content-length']);
  var bodyEnc = 'utf8';
  if (req.headers['content-type']) bodyEnc = typer.parse(req.headers['content-type']).parameters.charset || 'utf8';

  if (!bodyLength || bodyLength === 0) {
    req.jsonBody = {};

    return callback();
  }

  req.rawBody = new Buffer(0);
  //req.rawBody = '';
  //req.setEncoding(bodyEnc);

  req.on('readable', function() {
    if (req.rawBody.length < bodyLength) {
      var chunk;

      while (null !== (chunk = req.read(bodyLength - req.rawBody.length))) {
        //req.rawBody += chunk;
        req.rawBody = Buffer.concat([ req.rawBody, chunk ]);
        //req.rawBody = chunk;

        req.unshift(chunk);
      }

      console.log('[body]', req.method, req.url, req.rawBody.toString(bodyEnc));

      try {
        req.jsonBody = JSON.parse(req.rawBody.toString(bodyEnc));
      } catch (err) {
        console.log('[error]', err, req.url);
      }

      callback();
    }
  });

/*
  req.on('readable', function() {
    if (req.rawBody.length < bodyLength) {
      var chunk;

      while (null !== (chunk = req.read(bodyLength - req.rawBody.length))) {
        //req.rawBody += chunk;
        //req.rawBody = Buffer.concat([ req.rawBody, chunk ]);
        req.rawBody = chunk;

        //req.push(' ');
        //req.unshift(new Buffer([ 1 ]));
        //req.unshift(req.rawBody);
        req.unshift(chunk);
      }
    } else {
      try {
        req.jsonBody = JSON.parse(req.rawBody.toString(bodyEnc));
      } catch (err) {
        console.log('[error]', err, req.url);
      }

      callback();
    }
  });
*/
};



// proxy to forward requests
var proxy = httpProxy.createProxyServer({
  ws: false
});

proxy.on('error', function(err) {
  console.error(err);
});



// HTTP server to listen for incoming requests
var server;

var requestListener = function(req, res) {
  async.series([
    function(callback) {
      if (filter.inspectRequestBody(req)) getRequestJsonBody(req, callback);
      else callback();
    },
    function(callback) {
      var ar = filter.allowRequest(req);

      if (ar === false || _.isString(ar)) {
        res.writeHead(403, { 'Content-Type': 'text/plain' });

        res.write('Forbidden');
        if (_.isString(ar)) res.write(': ' + ar);

        res.end();

        console.log('[blocked]', req.method, req.url);
      } else {
        proxy.web(req, res, {
          target: targetSocket
        });

        action.manageGateway(req, res, { targetUrl: targetSocket }, function(err) {
          if (err) console.log('[error]', err);
        });

        console.log('[allowed]', req.method, req.url);
      }

      callback();
    }
  ], function(err) {
    if (err) {
      res.writeHead(400, { 'Content-Type': 'text/plain' });
      res.write('Invalid request: ' + err);
      res.end();

      console.error('[error]', err);
    }
  });
};

server = http.createServer(requestListener);
server.listen(proxyPort);

console.log('proxy server listening on port ' + proxyPort);



// simple echo server for testing
/*var server = http.createServer(function(req, res) {
  req.pipe(res);
  console.log('echo');
}).listen(8888);*/
